'''
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
'''
# I suspect that pentagonal and hexagonal will always grow faster than triangular
# therefore, if we compute all 3 for n, where n is (1,2,3,...), and hash the values
# we can easily find the next number in O(n) time

def calcTri(n):
    return n * (n + 1) * .5

def calcPent(n):
    return n * (3 * n - 1) * .5

def calcHex(n):
    return n * (2 * n - 1)

def iter():
    hexs = set()
    pents = set()
    n = 1
    while(True):
        hexs.add(calcHex(n))
        pents.add(calcPent(n))
        tri = calcTri(n)
        if tri in hexs and tri in pents:
            print(tri)
        n = n + 1
        

def main():
    assert calcHex(143) == calcPent(165) == calcTri(285) == 40755
    iter()

if __name__ == '__main__':
    main()