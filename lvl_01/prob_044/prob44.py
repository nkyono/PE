'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, 
for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
what is the value of D?
'''

# no longer used because of the fact that I just ended up using a dictionary so that I didn't need to recompute
def checkPent(n, lim):
    while True:
        p = lim * (3 * lim - 1) * .5
        if n == p:
            return True
        elif p > n:
            return False
        else:
            lim = lim + 1
    return False


# took a while b/c I didn't try to find a good search area
# probably/def a way to calculate a limit with the formula
def iter():
    pent = {}
    for x in range(1,10000):
        pent[x * (3 * x - 1) * .5] = x

    '''
    for x in pent:
        print(x, pent[x])
    '''

    min_d = None
    for x in range(1,4000):
        for y in range(x+1, 4000):
            p1 = x * (3 * x - 1) * .5
            p2 = y * (3 * y - 1) * .5
            p_add = p2 + p1
            p_diff = abs(p1-p2)
            # print(p1,p2,p_add,p_diff,checkPent(p_add, 1),checkPent(p_diff, 1))
            if p_add in pent and p_diff in pent:
                print(x,y,p1,p2,p_add,p_diff)
    # print(min_d)



def main():
    assert checkPent(70, 1) == True
    assert checkPent(51, 1) == True
    assert checkPent(145, 1) == True
    iter()


if __name__ == '__main__':
    main()